/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  FunctionsRouter,
  FunctionsRouterInterface,
} from "../../../../../contracts/chainlink-functions/dev/v1_0_0/FunctionsRouter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "RequestProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "fulfill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "getCommitment",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "error",
        type: "bytes",
      },
      {
        internalType: "enum FunctionsResponse.Status",
        name: "status",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfig",
    outputs: [
      {
        internalType: "uint32",
        name: "fulfillmentGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "requestTimeoutSeconds",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "donId",
        type: "bytes32",
      },
    ],
    name: "sendRequest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109ea806100206000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c806201229114610050578063690ad8f21461006d578063725ecd561461008e5780637795820c146100a3575b600080fd5b60408051620493e0815261012c6020820152015b60405180910390f35b61008061007b36600461058a565b6100c5565b604051908152602001610064565b6100a161009c3660046106d2565b610220565b005b6100b66100b136600461073f565b6103de565b604051610064939291906107b4565b604080514260208201526bffffffffffffffffffffffff193360601b16918101919091526001600160c01b031960c087901b1660548201526000908190605c0160408051601f19818403018152828252805160209182012060008181526001835283902080546001600160a01b031916331790556080601f8a018390049092028401820190925260608301888152919350829190899089908190850183828082843760009201829052509385525050604080518381526020808201835280860191909152600194820194909452858352928290525020815181906101a99082610891565b50602082015160018201906101be9082610891565b50604082015160028201805460ff191660018360038111156101e2576101e261079e565b02179055505060405133915082907f91f0d67c2f27abd6cfc317e120d5e80b31e97b9926b65d3887e59402fb20adfb90600090a39695505050505050565b6000838152600160205260409020546001600160a01b03168061027e5760405162461bcd60e51b815260206004820152601160248201527014995c5d595cdd081b9bdd08199bdd5b99607a1b60448201526064015b60405180910390fd5b60008481526020819052604090206001600282015460ff1660038111156102a7576102a761079e565b146102f45760405162461bcd60e51b815260206004820152601960248201527f5265717565737420616c72656164792066756c66696c6c6564000000000000006044820152606401610275565b82511561031e5760028101805460ff19166003179055600181016103188482610891565b5061033b565b6002818101805460ff19169091179055806103398582610891565b505b604051630ca7617560e01b81526001600160a01b03831690630ca761759061036b90889088908890600401610951565b600060405180830381600087803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b50505050847fcd961f6ba50fcf8173552234bd381624878700df58159a1f90fb60e5ed40d33185856040516103cf929190610986565b60405180910390a25050505050565b60608060008060008086815260200190815260200160002060405180606001604052908160008201805461041190610808565b80601f016020809104026020016040519081016040528092919081815260200182805461043d90610808565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b505050505081526020016001820180546104a390610808565b80601f01602080910402602001604051908101604052809291908181526020018280546104cf90610808565b801561051c5780601f106104f15761010080835404028352916020019161051c565b820191906000526020600020905b8154815290600101906020018083116104ff57829003601f168201915b5050509183525050600282015460209091019060ff1660038111156105435761054361079e565b60038111156105545761055461079e565b905250805160208201516040909201519097919650945092505050565b803563ffffffff8116811461058557600080fd5b919050565b6000806000806000608086880312156105a257600080fd5b853567ffffffffffffffff80821682146105bb57600080fd5b909550602087013590808211156105d157600080fd5b818801915088601f8301126105e557600080fd5b8135818111156105f457600080fd5b89602082850101111561060657600080fd5b60208301965080955050505061061e60408701610571565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261065657600080fd5b813567ffffffffffffffff808211156106715761067161062f565b604051601f8301601f19908116603f011681019082821181831017156106995761069961062f565b816040528381528660208588010111156106b257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156106e757600080fd5b83359250602084013567ffffffffffffffff8082111561070657600080fd5b61071287838801610645565b9350604086013591508082111561072857600080fd5b5061073586828701610645565b9150509250925092565b60006020828403121561075157600080fd5b5035919050565b6000815180845260005b8181101561077e57602081850181015186830182015201610762565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6060815260006107c76060830186610758565b82810360208401526107d98186610758565b915050600483106107fa57634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b600181811c9082168061081c57607f821691505b60208210810361083c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561088c57600081815260208120601f850160051c810160208610156108695750805b601f850160051c820191505b8181101561088857828155600101610875565b5050505b505050565b815167ffffffffffffffff8111156108ab576108ab61062f565b6108bf816108b98454610808565b84610842565b602080601f8311600181146108f457600084156108dc5750858301515b600019600386901b1c1916600185901b178555610888565b600085815260208120601f198616915b8281101561092357888601518255948401946001909101908401610904565b50858210156109415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b83815260606020820152600061096a6060830185610758565b828103604084015261097c8185610758565b9695505050505050565b6040815260006109996040830185610758565b82810360208401526109ab8185610758565b9594505050505056fea264697066735822122090aa03075f3a6eb362e038f426e669e6a71795781164d2e24d61a4fe33230e8664736f6c63430008140033";

type FunctionsRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FunctionsRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FunctionsRouter__factory extends ContractFactory {
  constructor(...args: FunctionsRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FunctionsRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FunctionsRouter__factory {
    return super.connect(runner) as FunctionsRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FunctionsRouterInterface {
    return new Interface(_abi) as FunctionsRouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FunctionsRouter {
    return new Contract(address, _abi, runner) as unknown as FunctionsRouter;
  }
}
