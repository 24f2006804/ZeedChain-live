/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AIAdvisorIntegration {
  export type AIAdviceStruct = {
    startupId: BigNumberish;
    confidenceScore: BigNumberish;
    recommendation: string;
    timestamp: BigNumberish;
    isValid: boolean;
  };

  export type AIAdviceStructOutput = [
    startupId: bigint,
    confidenceScore: bigint,
    recommendation: string,
    timestamp: bigint,
    isValid: boolean
  ] & {
    startupId: bigint;
    confidenceScore: bigint;
    recommendation: string;
    timestamp: bigint;
    isValid: boolean;
  };
}

export interface AIAdvisorIntegrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllAdvice"
      | "getLatestAdvice"
      | "handleOracleFulfillment"
      | "owner"
      | "renounceOwnership"
      | "requestAIAdvice"
      | "startupAdvice"
      | "transferOwnership"
      | "updateConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdviceReceived"
      | "AdviceRequested"
      | "OwnershipTransferred"
      | "RequestFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllAdvice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAdvice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAIAdvice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startupAdvice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllAdvice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAdvice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAIAdvice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startupAdvice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
}

export namespace AdviceReceivedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    recommendation: string,
    confidenceScore: BigNumberish
  ];
  export type OutputTuple = [
    startupId: bigint,
    recommendation: string,
    confidenceScore: bigint
  ];
  export interface OutputObject {
    startupId: bigint;
    recommendation: string;
    confidenceScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdviceRequestedEvent {
  export type InputTuple = [requestId: BytesLike, startupId: BigNumberish];
  export type OutputTuple = [requestId: string, startupId: bigint];
  export interface OutputObject {
    requestId: string;
    startupId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFailedEvent {
  export type InputTuple = [requestId: BytesLike, reason: BytesLike];
  export type OutputTuple = [requestId: string, reason: string];
  export interface OutputObject {
    requestId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIAdvisorIntegration extends BaseContract {
  connect(runner?: ContractRunner | null): AIAdvisorIntegration;
  waitForDeployment(): Promise<this>;

  interface: AIAdvisorIntegrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllAdvice: TypedContractMethod<
    [startupId: BigNumberish],
    [AIAdvisorIntegration.AIAdviceStructOutput[]],
    "view"
  >;

  getLatestAdvice: TypedContractMethod<
    [startupId: BigNumberish],
    [
      [string, bigint, bigint] & {
        recommendation: string;
        confidenceScore: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestAIAdvice: TypedContractMethod<
    [startupId: BigNumberish],
    [string],
    "nonpayable"
  >;

  startupAdvice: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, bigint, boolean] & {
        startupId: bigint;
        confidenceScore: bigint;
        recommendation: string;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateConfig: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      donId: BytesLike,
      gasLimit: BigNumberish,
      source: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllAdvice"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [AIAdvisorIntegration.AIAdviceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestAdvice"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [
      [string, bigint, bigint] & {
        recommendation: string;
        confidenceScore: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestAIAdvice"
  ): TypedContractMethod<[startupId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "startupAdvice"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, bigint, boolean] & {
        startupId: bigint;
        confidenceScore: bigint;
        recommendation: string;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      donId: BytesLike,
      gasLimit: BigNumberish,
      source: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdviceReceived"
  ): TypedContractEvent<
    AdviceReceivedEvent.InputTuple,
    AdviceReceivedEvent.OutputTuple,
    AdviceReceivedEvent.OutputObject
  >;
  getEvent(
    key: "AdviceRequested"
  ): TypedContractEvent<
    AdviceRequestedEvent.InputTuple,
    AdviceRequestedEvent.OutputTuple,
    AdviceRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFailed"
  ): TypedContractEvent<
    RequestFailedEvent.InputTuple,
    RequestFailedEvent.OutputTuple,
    RequestFailedEvent.OutputObject
  >;

  filters: {
    "AdviceReceived(uint256,string,uint256)": TypedContractEvent<
      AdviceReceivedEvent.InputTuple,
      AdviceReceivedEvent.OutputTuple,
      AdviceReceivedEvent.OutputObject
    >;
    AdviceReceived: TypedContractEvent<
      AdviceReceivedEvent.InputTuple,
      AdviceReceivedEvent.OutputTuple,
      AdviceReceivedEvent.OutputObject
    >;

    "AdviceRequested(bytes32,uint256)": TypedContractEvent<
      AdviceRequestedEvent.InputTuple,
      AdviceRequestedEvent.OutputTuple,
      AdviceRequestedEvent.OutputObject
    >;
    AdviceRequested: TypedContractEvent<
      AdviceRequestedEvent.InputTuple,
      AdviceRequestedEvent.OutputTuple,
      AdviceRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFailed(bytes32,bytes)": TypedContractEvent<
      RequestFailedEvent.InputTuple,
      RequestFailedEvent.OutputTuple,
      RequestFailedEvent.OutputObject
    >;
    RequestFailed: TypedContractEvent<
      RequestFailedEvent.InputTuple,
      RequestFailedEvent.OutputTuple,
      RequestFailedEvent.OutputObject
    >;
  };
}
