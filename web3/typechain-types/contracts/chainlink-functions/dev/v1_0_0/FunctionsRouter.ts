/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface FunctionsRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fulfill"
      | "getCommitment"
      | "getRequestConfig"
      | "sendRequest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RequestProcessed" | "RequestSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "fulfill",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
}

export namespace RequestProcessedEvent {
  export type InputTuple = [id: BytesLike, response: BytesLike, err: BytesLike];
  export type OutputTuple = [id: string, response: string, err: string];
  export interface OutputObject {
    id: string;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike, requester: AddressLike];
  export type OutputTuple = [id: string, requester: string];
  export interface OutputObject {
    id: string;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunctionsRouter extends BaseContract {
  connect(runner?: ContractRunner | null): FunctionsRouter;
  waitForDeployment(): Promise<this>;

  interface: FunctionsRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fulfill: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  getCommitment: TypedContractMethod<
    [requestId: BytesLike],
    [
      [string, string, bigint] & { data: string; error: string; status: bigint }
    ],
    "view"
  >;

  getRequestConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        fulfillmentGasLimit: bigint;
        requestTimeoutSeconds: bigint;
      }
    ],
    "view"
  >;

  sendRequest: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish,
      donId: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fulfill"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCommitment"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [
      [string, string, bigint] & { data: string; error: string; status: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        fulfillmentGasLimit: bigint;
        requestTimeoutSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish,
      donId: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "RequestProcessed"
  ): TypedContractEvent<
    RequestProcessedEvent.InputTuple,
    RequestProcessedEvent.OutputTuple,
    RequestProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;

  filters: {
    "RequestProcessed(bytes32,bytes,bytes)": TypedContractEvent<
      RequestProcessedEvent.InputTuple,
      RequestProcessedEvent.OutputTuple,
      RequestProcessedEvent.OutputObject
    >;
    RequestProcessed: TypedContractEvent<
      RequestProcessedEvent.InputTuple,
      RequestProcessedEvent.OutputTuple,
      RequestProcessedEvent.OutputObject
    >;

    "RequestSent(bytes32,address)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
  };
}
