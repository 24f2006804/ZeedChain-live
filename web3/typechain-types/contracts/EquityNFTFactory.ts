/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EquityNFTFactory {
  export type StartupStruct = {
    name: string;
    description: string;
    totalShares: BigNumberish;
    availableShares: BigNumberish;
    valuation: BigNumberish;
    founder: AddressLike;
    isValidated: boolean;
  };

  export type StartupStructOutput = [
    name: string,
    description: string,
    totalShares: bigint,
    availableShares: bigint,
    valuation: bigint,
    founder: string,
    isValidated: boolean
  ] & {
    name: string;
    description: string;
    totalShares: bigint;
    availableShares: bigint;
    valuation: bigint;
    founder: string;
    isValidated: boolean;
  };
}

export interface EquityNFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTrustedIssuer"
      | "addValidator"
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "getFounderStartups"
      | "getStartupDetails"
      | "getStartupValuation"
      | "isApprovedForAll"
      | "issueShares"
      | "name"
      | "owner"
      | "ownerOf"
      | "registerStartup"
      | "removeTrustedIssuer"
      | "removeValidator"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "startups"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalStartups"
      | "transferFrom"
      | "transferOwnership"
      | "trustedIssuers"
      | "updateValuation"
      | "validateStartup"
      | "validators"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "OwnershipTransferred"
      | "SharesIssued"
      | "StartupRegistered"
      | "StartupValidated"
      | "Transfer"
      | "TrustedIssuerUpdated"
      | "ValuationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTrustedIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFounderStartups",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartupDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartupValuation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueShares",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStartup",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startups",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStartups",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIssuers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValuation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateStartup",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFounderStartups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartupDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartupValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStartup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startups", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStartups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateStartup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesIssuedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    to: AddressLike,
    shares: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, to: string, shares: bigint];
  export interface OutputObject {
    tokenId: bigint;
    to: string;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartupRegisteredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    name: string,
    founder: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, name: string, founder: string];
  export interface OutputObject {
    tokenId: bigint;
    name: string;
    founder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartupValidatedEvent {
  export type InputTuple = [tokenId: BigNumberish, status: boolean];
  export type OutputTuple = [tokenId: bigint, status: boolean];
  export interface OutputObject {
    tokenId: bigint;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedIssuerUpdatedEvent {
  export type InputTuple = [issuer: AddressLike, status: boolean];
  export type OutputTuple = [issuer: string, status: boolean];
  export interface OutputObject {
    issuer: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    oldValuation: BigNumberish,
    newValuation: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    oldValuation: bigint,
    newValuation: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    oldValuation: bigint;
    newValuation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EquityNFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): EquityNFTFactory;
  waitForDeployment(): Promise<this>;

  interface: EquityNFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTrustedIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [void],
    "nonpayable"
  >;

  addValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getFounderStartups: TypedContractMethod<
    [founder: AddressLike],
    [bigint[]],
    "view"
  >;

  getStartupDetails: TypedContractMethod<
    [tokenId: BigNumberish],
    [EquityNFTFactory.StartupStructOutput],
    "view"
  >;

  getStartupValuation: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  issueShares: TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  registerStartup: TypedContractMethod<
    [
      name: string,
      description: string,
      totalShares: BigNumberish,
      initialValuation: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  removeTrustedIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [void],
    "nonpayable"
  >;

  removeValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  startups: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        name: string;
        description: string;
        totalShares: bigint;
        availableShares: bigint;
        valuation: bigint;
        founder: string;
        isValidated: boolean;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalStartups: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedIssuers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  updateValuation: TypedContractMethod<
    [tokenId: BigNumberish, newValuation: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateStartup: TypedContractMethod<
    [tokenId: BigNumberish, status: boolean],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTrustedIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFounderStartups"
  ): TypedContractMethod<[founder: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStartupDetails"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [EquityNFTFactory.StartupStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStartupValuation"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueShares"
  ): TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registerStartup"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      totalShares: BigNumberish,
      initialValuation: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTrustedIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startups"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        name: string;
        description: string;
        totalShares: bigint;
        availableShares: bigint;
        valuation: bigint;
        founder: string;
        isValidated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalStartups"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedIssuers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateValuation"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newValuation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateStartup"
  ): TypedContractMethod<
    [tokenId: BigNumberish, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SharesIssued"
  ): TypedContractEvent<
    SharesIssuedEvent.InputTuple,
    SharesIssuedEvent.OutputTuple,
    SharesIssuedEvent.OutputObject
  >;
  getEvent(
    key: "StartupRegistered"
  ): TypedContractEvent<
    StartupRegisteredEvent.InputTuple,
    StartupRegisteredEvent.OutputTuple,
    StartupRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "StartupValidated"
  ): TypedContractEvent<
    StartupValidatedEvent.InputTuple,
    StartupValidatedEvent.OutputTuple,
    StartupValidatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TrustedIssuerUpdated"
  ): TypedContractEvent<
    TrustedIssuerUpdatedEvent.InputTuple,
    TrustedIssuerUpdatedEvent.OutputTuple,
    TrustedIssuerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ValuationUpdated"
  ): TypedContractEvent<
    ValuationUpdatedEvent.InputTuple,
    ValuationUpdatedEvent.OutputTuple,
    ValuationUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SharesIssued(uint256,address,uint256)": TypedContractEvent<
      SharesIssuedEvent.InputTuple,
      SharesIssuedEvent.OutputTuple,
      SharesIssuedEvent.OutputObject
    >;
    SharesIssued: TypedContractEvent<
      SharesIssuedEvent.InputTuple,
      SharesIssuedEvent.OutputTuple,
      SharesIssuedEvent.OutputObject
    >;

    "StartupRegistered(uint256,string,address)": TypedContractEvent<
      StartupRegisteredEvent.InputTuple,
      StartupRegisteredEvent.OutputTuple,
      StartupRegisteredEvent.OutputObject
    >;
    StartupRegistered: TypedContractEvent<
      StartupRegisteredEvent.InputTuple,
      StartupRegisteredEvent.OutputTuple,
      StartupRegisteredEvent.OutputObject
    >;

    "StartupValidated(uint256,bool)": TypedContractEvent<
      StartupValidatedEvent.InputTuple,
      StartupValidatedEvent.OutputTuple,
      StartupValidatedEvent.OutputObject
    >;
    StartupValidated: TypedContractEvent<
      StartupValidatedEvent.InputTuple,
      StartupValidatedEvent.OutputTuple,
      StartupValidatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TrustedIssuerUpdated(address,bool)": TypedContractEvent<
      TrustedIssuerUpdatedEvent.InputTuple,
      TrustedIssuerUpdatedEvent.OutputTuple,
      TrustedIssuerUpdatedEvent.OutputObject
    >;
    TrustedIssuerUpdated: TypedContractEvent<
      TrustedIssuerUpdatedEvent.InputTuple,
      TrustedIssuerUpdatedEvent.OutputTuple,
      TrustedIssuerUpdatedEvent.OutputObject
    >;

    "ValuationUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
    ValuationUpdated: TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
  };
}
