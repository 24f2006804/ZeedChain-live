/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProfitDistributionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimProfit"
      | "distributeProfit"
      | "distributions"
      | "fractionalInvestment"
      | "getUnclaimedDistributions"
      | "lastDistributionIndex"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProfitClaimed" | "ProfitDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimProfit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeProfit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fractionalInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedDistributions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDistributionIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fractionalInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDistributionIndex",
    data: BytesLike
  ): Result;
}

export namespace ProfitClaimedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish,
    distributionIndex: BigNumberish
  ];
  export type OutputTuple = [
    startupId: bigint,
    investor: string,
    amount: bigint,
    distributionIndex: bigint
  ];
  export interface OutputObject {
    startupId: bigint;
    investor: string;
    amount: bigint;
    distributionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfitDistributedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    amount: BigNumberish,
    distributionIndex: BigNumberish
  ];
  export type OutputTuple = [
    startupId: bigint,
    amount: bigint,
    distributionIndex: bigint
  ];
  export interface OutputObject {
    startupId: bigint;
    amount: bigint;
    distributionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProfitDistribution extends BaseContract {
  connect(runner?: ContractRunner | null): ProfitDistribution;
  waitForDeployment(): Promise<this>;

  interface: ProfitDistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimProfit: TypedContractMethod<
    [startupId: BigNumberish, distributionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeProfit: TypedContractMethod<
    [startupId: BigNumberish],
    [void],
    "payable"
  >;

  distributions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        remainingAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  fractionalInvestment: TypedContractMethod<[], [string], "view">;

  getUnclaimedDistributions: TypedContractMethod<
    [startupId: BigNumberish, investor: AddressLike],
    [bigint[]],
    "view"
  >;

  lastDistributionIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimProfit"
  ): TypedContractMethod<
    [startupId: BigNumberish, distributionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeProfit"
  ): TypedContractMethod<[startupId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "distributions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        remainingAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fractionalInvestment"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUnclaimedDistributions"
  ): TypedContractMethod<
    [startupId: BigNumberish, investor: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastDistributionIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "ProfitClaimed"
  ): TypedContractEvent<
    ProfitClaimedEvent.InputTuple,
    ProfitClaimedEvent.OutputTuple,
    ProfitClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ProfitDistributed"
  ): TypedContractEvent<
    ProfitDistributedEvent.InputTuple,
    ProfitDistributedEvent.OutputTuple,
    ProfitDistributedEvent.OutputObject
  >;

  filters: {
    "ProfitClaimed(uint256,address,uint256,uint256)": TypedContractEvent<
      ProfitClaimedEvent.InputTuple,
      ProfitClaimedEvent.OutputTuple,
      ProfitClaimedEvent.OutputObject
    >;
    ProfitClaimed: TypedContractEvent<
      ProfitClaimedEvent.InputTuple,
      ProfitClaimedEvent.OutputTuple,
      ProfitClaimedEvent.OutputObject
    >;

    "ProfitDistributed(uint256,uint256,uint256)": TypedContractEvent<
      ProfitDistributedEvent.InputTuple,
      ProfitDistributedEvent.OutputTuple,
      ProfitDistributedEvent.OutputObject
    >;
    ProfitDistributed: TypedContractEvent<
      ProfitDistributedEvent.InputTuple,
      ProfitDistributedEvent.OutputTuple,
      ProfitDistributedEvent.OutputObject
    >;
  };
}
