/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DynamicValuationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GRACE_PERIOD"
      | "THRESHOLD_PERCENTAGE"
      | "UPDATE_INTERVAL"
      | "equityFactory"
      | "getLatestValuation"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setFeedStatus"
      | "setPriceFeed"
      | "startupFeeds"
      | "transferOwnership"
      | "unpause"
      | "updateValuation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "PriceFeedSet"
      | "StalePriceDetected"
      | "Unpaused"
      | "ValuationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THRESHOLD_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "equityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestValuation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startupFeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateValuation",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THRESHOLD_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startupFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateValuation",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedSetEvent {
  export type InputTuple = [startupId: BigNumberish, feedAddress: AddressLike];
  export type OutputTuple = [startupId: bigint, feedAddress: string];
  export interface OutputObject {
    startupId: bigint;
    feedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StalePriceDetectedEvent {
  export type InputTuple = [startupId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [startupId: bigint, timestamp: bigint];
  export interface OutputObject {
    startupId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationUpdatedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    newValuation: BigNumberish
  ];
  export type OutputTuple = [startupId: bigint, newValuation: bigint];
  export interface OutputObject {
    startupId: bigint;
    newValuation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DynamicValuation extends BaseContract {
  connect(runner?: ContractRunner | null): DynamicValuation;
  waitForDeployment(): Promise<this>;

  interface: DynamicValuationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  THRESHOLD_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  UPDATE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  equityFactory: TypedContractMethod<[], [string], "view">;

  getLatestValuation: TypedContractMethod<
    [startupId: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeedStatus: TypedContractMethod<
    [startupId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [startupId: BigNumberish, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  startupFeeds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        feedAddress: string;
        lastUpdateTime: bigint;
        decimals: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateValuation: TypedContractMethod<
    [startupId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "THRESHOLD_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPDATE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "equityFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLatestValuation"
  ): TypedContractMethod<[startupId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeedStatus"
  ): TypedContractMethod<
    [startupId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<
    [startupId: BigNumberish, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startupFeeds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        feedAddress: string;
        lastUpdateTime: bigint;
        decimals: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateValuation"
  ): TypedContractMethod<[startupId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedSet"
  ): TypedContractEvent<
    PriceFeedSetEvent.InputTuple,
    PriceFeedSetEvent.OutputTuple,
    PriceFeedSetEvent.OutputObject
  >;
  getEvent(
    key: "StalePriceDetected"
  ): TypedContractEvent<
    StalePriceDetectedEvent.InputTuple,
    StalePriceDetectedEvent.OutputTuple,
    StalePriceDetectedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ValuationUpdated"
  ): TypedContractEvent<
    ValuationUpdatedEvent.InputTuple,
    ValuationUpdatedEvent.OutputTuple,
    ValuationUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceFeedSet(uint256,address)": TypedContractEvent<
      PriceFeedSetEvent.InputTuple,
      PriceFeedSetEvent.OutputTuple,
      PriceFeedSetEvent.OutputObject
    >;
    PriceFeedSet: TypedContractEvent<
      PriceFeedSetEvent.InputTuple,
      PriceFeedSetEvent.OutputTuple,
      PriceFeedSetEvent.OutputObject
    >;

    "StalePriceDetected(uint256,uint256)": TypedContractEvent<
      StalePriceDetectedEvent.InputTuple,
      StalePriceDetectedEvent.OutputTuple,
      StalePriceDetectedEvent.OutputObject
    >;
    StalePriceDetected: TypedContractEvent<
      StalePriceDetectedEvent.InputTuple,
      StalePriceDetectedEvent.OutputTuple,
      StalePriceDetectedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "ValuationUpdated(uint256,uint256)": TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
    ValuationUpdated: TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
  };
}
