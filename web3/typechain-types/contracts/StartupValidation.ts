/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StartupValidationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINIMUM_VALIDATORS"
      | "addValidator"
      | "equityFactory"
      | "getValidationStatus"
      | "getValidatorCount"
      | "getValidatorList"
      | "owner"
      | "removeValidator"
      | "renounceOwnership"
      | "requestValidation"
      | "submitValidatorVote"
      | "transferOwnership"
      | "updateValidationThreshold"
      | "validationRequests"
      | "validationThreshold"
      | "validators"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ValidationCompleted"
      | "ValidationRequested"
      | "ValidatorAdded"
      | "ValidatorRemoved"
      | "ValidatorVoted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "equityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidationStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestValidation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitValidatorVote",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validationRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitValidatorVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationCompletedEvent {
  export type InputTuple = [startupId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [startupId: bigint, status: bigint];
  export interface OutputObject {
    startupId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationRequestedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    founder: AddressLike,
    documentHash: string
  ];
  export type OutputTuple = [
    startupId: bigint,
    founder: string,
    documentHash: string
  ];
  export interface OutputObject {
    startupId: bigint;
    founder: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [validator: AddressLike, name: string];
  export type OutputTuple = [validator: string, name: string];
  export interface OutputObject {
    validator: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorVotedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    validator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    startupId: bigint,
    validator: string,
    approved: boolean
  ];
  export interface OutputObject {
    startupId: bigint;
    validator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StartupValidation extends BaseContract {
  connect(runner?: ContractRunner | null): StartupValidation;
  waitForDeployment(): Promise<this>;

  interface: StartupValidationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINIMUM_VALIDATORS: TypedContractMethod<[], [bigint], "view">;

  addValidator: TypedContractMethod<
    [validator: AddressLike, name: string, credentials: string],
    [void],
    "nonpayable"
  >;

  equityFactory: TypedContractMethod<[], [string], "view">;

  getValidationStatus: TypedContractMethod<
    [startupId: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        status: bigint;
        approvalCount: bigint;
        rejectionCount: bigint;
        rejectionReason: string;
      }
    ],
    "view"
  >;

  getValidatorCount: TypedContractMethod<[], [bigint], "view">;

  getValidatorList: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestValidation: TypedContractMethod<
    [startupId: BigNumberish, documentHash: string],
    [void],
    "nonpayable"
  >;

  submitValidatorVote: TypedContractMethod<
    [startupId: BigNumberish, approved: boolean, rejectionReason: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateValidationThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  validationRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, bigint, bigint, string] & {
        startupId: bigint;
        founder: string;
        requestTimestamp: bigint;
        status: bigint;
        documentHash: string;
        approvalCount: bigint;
        rejectionCount: bigint;
        rejectionReason: string;
      }
    ],
    "view"
  >;

  validationThreshold: TypedContractMethod<[], [bigint], "view">;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        name: string;
        credentials: string;
        validationCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINIMUM_VALIDATORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<
    [validator: AddressLike, name: string, credentials: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "equityFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getValidationStatus"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        status: bigint;
        approvalCount: bigint;
        rejectionCount: bigint;
        rejectionReason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidatorList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestValidation"
  ): TypedContractMethod<
    [startupId: BigNumberish, documentHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitValidatorVote"
  ): TypedContractMethod<
    [startupId: BigNumberish, approved: boolean, rejectionReason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateValidationThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validationRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, bigint, bigint, string] & {
        startupId: bigint;
        founder: string;
        requestTimestamp: bigint;
        status: bigint;
        documentHash: string;
        approvalCount: bigint;
        rejectionCount: bigint;
        rejectionReason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "validationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        name: string;
        credentials: string;
        validationCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ValidationCompleted"
  ): TypedContractEvent<
    ValidationCompletedEvent.InputTuple,
    ValidationCompletedEvent.OutputTuple,
    ValidationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationRequested"
  ): TypedContractEvent<
    ValidationRequestedEvent.InputTuple,
    ValidationRequestedEvent.OutputTuple,
    ValidationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorVoted"
  ): TypedContractEvent<
    ValidatorVotedEvent.InputTuple,
    ValidatorVotedEvent.OutputTuple,
    ValidatorVotedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ValidationCompleted(uint256,uint8)": TypedContractEvent<
      ValidationCompletedEvent.InputTuple,
      ValidationCompletedEvent.OutputTuple,
      ValidationCompletedEvent.OutputObject
    >;
    ValidationCompleted: TypedContractEvent<
      ValidationCompletedEvent.InputTuple,
      ValidationCompletedEvent.OutputTuple,
      ValidationCompletedEvent.OutputObject
    >;

    "ValidationRequested(uint256,address,string)": TypedContractEvent<
      ValidationRequestedEvent.InputTuple,
      ValidationRequestedEvent.OutputTuple,
      ValidationRequestedEvent.OutputObject
    >;
    ValidationRequested: TypedContractEvent<
      ValidationRequestedEvent.InputTuple,
      ValidationRequestedEvent.OutputTuple,
      ValidationRequestedEvent.OutputObject
    >;

    "ValidatorAdded(address,string)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;

    "ValidatorVoted(uint256,address,bool)": TypedContractEvent<
      ValidatorVotedEvent.InputTuple,
      ValidatorVotedEvent.OutputTuple,
      ValidatorVotedEvent.OutputObject
    >;
    ValidatorVoted: TypedContractEvent<
      ValidatorVotedEvent.InputTuple,
      ValidatorVotedEvent.OutputTuple,
      ValidatorVotedEvent.OutputObject
    >;
  };
}
