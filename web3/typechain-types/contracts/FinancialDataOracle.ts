/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FinancialDataOracle {
  export type FinancialMetricsStruct = {
    startupId: BigNumberish;
    revenue: BigNumberish;
    userGrowth: BigNumberish;
    marketSize: BigNumberish;
    burnRate: BigNumberish;
    timestamp: BigNumberish;
  };

  export type FinancialMetricsStructOutput = [
    startupId: bigint,
    revenue: bigint,
    userGrowth: bigint,
    marketSize: bigint,
    burnRate: bigint,
    timestamp: bigint
  ] & {
    startupId: bigint;
    revenue: bigint;
    userGrowth: bigint;
    marketSize: bigint;
    burnRate: bigint;
    timestamp: bigint;
  };
}

export interface FinancialDataOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_UPDATE_INTERVAL"
      | "getHistoricalMetrics"
      | "getLatestMetrics"
      | "handleOracleFulfillment"
      | "owner"
      | "renounceOwnership"
      | "requestFinancialMetrics"
      | "startupMetrics"
      | "transferOwnership"
      | "updateConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MetricsReceived"
      | "MetricsRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_UPDATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFinancialMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startupMetrics",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_UPDATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFinancialMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startupMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
}

export namespace MetricsReceivedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    revenue: BigNumberish,
    userGrowth: BigNumberish,
    marketSize: BigNumberish,
    burnRate: BigNumberish
  ];
  export type OutputTuple = [
    startupId: bigint,
    revenue: bigint,
    userGrowth: bigint,
    marketSize: bigint,
    burnRate: bigint
  ];
  export interface OutputObject {
    startupId: bigint;
    revenue: bigint;
    userGrowth: bigint;
    marketSize: bigint;
    burnRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetricsRequestedEvent {
  export type InputTuple = [requestId: BytesLike, startupId: BigNumberish];
  export type OutputTuple = [requestId: string, startupId: bigint];
  export interface OutputObject {
    requestId: string;
    startupId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FinancialDataOracle extends BaseContract {
  connect(runner?: ContractRunner | null): FinancialDataOracle;
  waitForDeployment(): Promise<this>;

  interface: FinancialDataOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_UPDATE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  getHistoricalMetrics: TypedContractMethod<
    [startupId: BigNumberish],
    [FinancialDataOracle.FinancialMetricsStructOutput[]],
    "view"
  >;

  getLatestMetrics: TypedContractMethod<
    [startupId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        revenue: bigint;
        userGrowth: bigint;
        marketSize: bigint;
        burnRate: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestFinancialMetrics: TypedContractMethod<
    [startupId: BigNumberish],
    [string],
    "nonpayable"
  >;

  startupMetrics: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        startupId: bigint;
        revenue: bigint;
        userGrowth: bigint;
        marketSize: bigint;
        burnRate: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateConfig: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      donId: BytesLike,
      gasLimit: BigNumberish,
      source: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_UPDATE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHistoricalMetrics"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [FinancialDataOracle.FinancialMetricsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestMetrics"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        revenue: bigint;
        userGrowth: bigint;
        marketSize: bigint;
        burnRate: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFinancialMetrics"
  ): TypedContractMethod<[startupId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "startupMetrics"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        startupId: bigint;
        revenue: bigint;
        userGrowth: bigint;
        marketSize: bigint;
        burnRate: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      donId: BytesLike,
      gasLimit: BigNumberish,
      source: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetricsReceived"
  ): TypedContractEvent<
    MetricsReceivedEvent.InputTuple,
    MetricsReceivedEvent.OutputTuple,
    MetricsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MetricsRequested"
  ): TypedContractEvent<
    MetricsRequestedEvent.InputTuple,
    MetricsRequestedEvent.OutputTuple,
    MetricsRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MetricsReceived(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MetricsReceivedEvent.InputTuple,
      MetricsReceivedEvent.OutputTuple,
      MetricsReceivedEvent.OutputObject
    >;
    MetricsReceived: TypedContractEvent<
      MetricsReceivedEvent.InputTuple,
      MetricsReceivedEvent.OutputTuple,
      MetricsReceivedEvent.OutputObject
    >;

    "MetricsRequested(bytes32,uint256)": TypedContractEvent<
      MetricsRequestedEvent.InputTuple,
      MetricsRequestedEvent.OutputTuple,
      MetricsRequestedEvent.OutputObject
    >;
    MetricsRequested: TypedContractEvent<
      MetricsRequestedEvent.InputTuple,
      MetricsRequestedEvent.OutputTuple,
      MetricsRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
