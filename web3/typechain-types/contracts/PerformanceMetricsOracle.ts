/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PerformanceMetricsOracle {
  export type PerformanceDataStruct = {
    activeUsers: BigNumberish;
    monthlyRevenue: BigNumberish;
    customerGrowth: BigNumberish;
    retentionRate: BigNumberish;
    unitEconomics: BigNumberish;
    timestamp: BigNumberish;
    isValidated: boolean;
  };

  export type PerformanceDataStructOutput = [
    activeUsers: bigint,
    monthlyRevenue: bigint,
    customerGrowth: bigint,
    retentionRate: bigint,
    unitEconomics: bigint,
    timestamp: bigint,
    isValidated: boolean
  ] & {
    activeUsers: bigint;
    monthlyRevenue: bigint;
    customerGrowth: bigint;
    retentionRate: bigint;
    unitEconomics: bigint;
    timestamp: bigint;
    isValidated: boolean;
  };
}

export interface PerformanceMetricsOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "METRICS_PROVIDER_ROLE"
      | "MIN_UPDATE_INTERVAL"
      | "VALIDATOR_ROLE"
      | "getHistoricalMetrics"
      | "getLatestMetrics"
      | "getRoleAdmin"
      | "grantRole"
      | "handleOracleFulfillment"
      | "hasRole"
      | "lastUpdateTime"
      | "pause"
      | "paused"
      | "pendingRequests"
      | "renounceRole"
      | "requestPerformanceMetrics"
      | "revokeRole"
      | "startupPerformance"
      | "supportsInterface"
      | "unpause"
      | "updateConfig"
      | "validateMetrics"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MetricsReceived"
      | "MetricsRequested"
      | "MetricsValidated"
      | "Paused"
      | "RequestFailed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METRICS_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_UPDATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPerformanceMetrics",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startupPerformance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMetrics",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METRICS_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_UPDATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPerformanceMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startupPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMetrics",
    data: BytesLike
  ): Result;
}

export namespace MetricsReceivedEvent {
  export type InputTuple = [
    startupId: BigNumberish,
    activeUsers: BigNumberish,
    monthlyRevenue: BigNumberish,
    customerGrowth: BigNumberish,
    retentionRate: BigNumberish,
    unitEconomics: BigNumberish
  ];
  export type OutputTuple = [
    startupId: bigint,
    activeUsers: bigint,
    monthlyRevenue: bigint,
    customerGrowth: bigint,
    retentionRate: bigint,
    unitEconomics: bigint
  ];
  export interface OutputObject {
    startupId: bigint;
    activeUsers: bigint;
    monthlyRevenue: bigint;
    customerGrowth: bigint;
    retentionRate: bigint;
    unitEconomics: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetricsRequestedEvent {
  export type InputTuple = [requestId: BytesLike, startupId: BigNumberish];
  export type OutputTuple = [requestId: string, startupId: bigint];
  export interface OutputObject {
    requestId: string;
    startupId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetricsValidatedEvent {
  export type InputTuple = [startupId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [startupId: bigint, timestamp: bigint];
  export interface OutputObject {
    startupId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFailedEvent {
  export type InputTuple = [requestId: BytesLike, reason: BytesLike];
  export type OutputTuple = [requestId: string, reason: string];
  export interface OutputObject {
    requestId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PerformanceMetricsOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PerformanceMetricsOracle;
  waitForDeployment(): Promise<this>;

  interface: PerformanceMetricsOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  METRICS_PROVIDER_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_UPDATE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  VALIDATOR_ROLE: TypedContractMethod<[], [string], "view">;

  getHistoricalMetrics: TypedContractMethod<
    [startupId: BigNumberish],
    [PerformanceMetricsOracle.PerformanceDataStructOutput[]],
    "view"
  >;

  getLatestMetrics: TypedContractMethod<
    [startupId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        activeUsers: bigint;
        monthlyRevenue: bigint;
        customerGrowth: bigint;
        retentionRate: bigint;
        unitEconomics: bigint;
        timestamp: bigint;
        isValidated: boolean;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lastUpdateTime: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, boolean] & {
        startupId: bigint;
        timestamp: bigint;
        dataSource: string;
        isPending: boolean;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requestPerformanceMetrics: TypedContractMethod<
    [startupId: BigNumberish, dataSource: string],
    [string],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  startupPerformance: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        activeUsers: bigint;
        monthlyRevenue: bigint;
        customerGrowth: bigint;
        retentionRate: bigint;
        unitEconomics: bigint;
        timestamp: bigint;
        isValidated: boolean;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateConfig: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      donId: BytesLike,
      gasLimit: BigNumberish,
      source: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  validateMetrics: TypedContractMethod<
    [startupId: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "METRICS_PROVIDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_UPDATE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getHistoricalMetrics"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [PerformanceMetricsOracle.PerformanceDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestMetrics"
  ): TypedContractMethod<
    [startupId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        activeUsers: bigint;
        monthlyRevenue: bigint;
        customerGrowth: bigint;
        retentionRate: bigint;
        unitEconomics: bigint;
        timestamp: bigint;
        isValidated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, boolean] & {
        startupId: bigint;
        timestamp: bigint;
        dataSource: string;
        isPending: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestPerformanceMetrics"
  ): TypedContractMethod<
    [startupId: BigNumberish, dataSource: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startupPerformance"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        activeUsers: bigint;
        monthlyRevenue: bigint;
        customerGrowth: bigint;
        retentionRate: bigint;
        unitEconomics: bigint;
        timestamp: bigint;
        isValidated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      donId: BytesLike,
      gasLimit: BigNumberish,
      source: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateMetrics"
  ): TypedContractMethod<
    [startupId: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetricsReceived"
  ): TypedContractEvent<
    MetricsReceivedEvent.InputTuple,
    MetricsReceivedEvent.OutputTuple,
    MetricsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MetricsRequested"
  ): TypedContractEvent<
    MetricsRequestedEvent.InputTuple,
    MetricsRequestedEvent.OutputTuple,
    MetricsRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MetricsValidated"
  ): TypedContractEvent<
    MetricsValidatedEvent.InputTuple,
    MetricsValidatedEvent.OutputTuple,
    MetricsValidatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RequestFailed"
  ): TypedContractEvent<
    RequestFailedEvent.InputTuple,
    RequestFailedEvent.OutputTuple,
    RequestFailedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "MetricsReceived(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MetricsReceivedEvent.InputTuple,
      MetricsReceivedEvent.OutputTuple,
      MetricsReceivedEvent.OutputObject
    >;
    MetricsReceived: TypedContractEvent<
      MetricsReceivedEvent.InputTuple,
      MetricsReceivedEvent.OutputTuple,
      MetricsReceivedEvent.OutputObject
    >;

    "MetricsRequested(bytes32,uint256)": TypedContractEvent<
      MetricsRequestedEvent.InputTuple,
      MetricsRequestedEvent.OutputTuple,
      MetricsRequestedEvent.OutputObject
    >;
    MetricsRequested: TypedContractEvent<
      MetricsRequestedEvent.InputTuple,
      MetricsRequestedEvent.OutputTuple,
      MetricsRequestedEvent.OutputObject
    >;

    "MetricsValidated(uint256,uint256)": TypedContractEvent<
      MetricsValidatedEvent.InputTuple,
      MetricsValidatedEvent.OutputTuple,
      MetricsValidatedEvent.OutputObject
    >;
    MetricsValidated: TypedContractEvent<
      MetricsValidatedEvent.InputTuple,
      MetricsValidatedEvent.OutputTuple,
      MetricsValidatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RequestFailed(bytes32,bytes)": TypedContractEvent<
      RequestFailedEvent.InputTuple,
      RequestFailedEvent.OutputTuple,
      RequestFailedEvent.OutputObject
    >;
    RequestFailed: TypedContractEvent<
      RequestFailedEvent.InputTuple,
      RequestFailedEvent.OutputTuple,
      RequestFailedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
